#!/usr/bin/env python3
"""
Test script for Google Drive article uploader.

This script tests uploading HTML content to Google Drive as a Google Doc.
"""

import sys
import logging
from pathlib import Path
from datetime import datetime

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent))

from rag.drive.auth import GoogleDriveAuth
from rag.drive.uploader import ArticleUploader

# Set up logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# Sample HTML content for testing
SAMPLE_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>Test Article - SEO Best Practices 2025</title>
    <meta name="description" content="A comprehensive guide to SEO best practices for 2025">
</head>
<body>
    <h1>SEO Best Practices for 2025</h1>
    
    <p><strong>Published:</strong> {date}</p>
    
    <h2>Introduction</h2>
    <p>This is a test article demonstrating the Google Drive upload functionality. 
    In this guide, we'll explore the latest SEO strategies and techniques for 2025.</p>
    
    <h2>Key Strategies</h2>
    <ul>
        <li>Focus on user experience and Core Web Vitals</li>
        <li>Optimize for voice search and AI assistants</li>
        <li>Create comprehensive, authoritative content</li>
        <li>Build quality backlinks from reputable sources</li>
    </ul>
    
    <h2>Technical SEO Considerations</h2>
    <p>Technical SEO remains crucial for success. Key areas to focus on include:</p>
    <ol>
        <li>Page speed optimization</li>
        <li>Mobile-first design</li>
        <li>Structured data implementation</li>
        <li>XML sitemap optimization</li>
    </ol>
    
    <h2>Conclusion</h2>
    <p>By following these best practices, you can improve your website's visibility 
    and ranking in search engine results for 2025 and beyond.</p>
    
    <p><em>This article was generated by the SEO Content Automation System.</em></p>
</body>
</html>
""".format(
    date=datetime.now().strftime("%B %d, %Y")
)


def main():
    """Test Google Drive article upload functionality."""
    print("=== Google Drive Article Upload Test ===\n")

    try:
        # Create auth and uploader instances
        print("1. Initializing authentication...")
        auth = GoogleDriveAuth()

        # This will use existing token if available
        if not auth.is_authenticated:
            auth.authenticate()
        print("   ✓ Authentication ready\n")

        # Create uploader
        print("2. Creating uploader instance...")
        uploader = ArticleUploader(auth=auth)
        print("   ✓ Uploader initialized\n")

        # Test folder creation
        print("3. Testing folder creation...")
        date_path = datetime.now().strftime("%Y/%m/%d")
        print(f"   Creating folder structure: {date_path}")

        # The uploader will create this structure automatically
        print("   ✓ Folder structure will be created during upload\n")

        # Upload test article
        print("4. Uploading test article...")
        title = f"Test Article - {datetime.now().strftime('%Y%m%d_%H%M%S')}"

        metadata = {
            "keywords": ["seo", "test", "automation"],
            "author": "SEO Content Automation System",
            "generation_date": datetime.now().isoformat(),
            "word_count": len(SAMPLE_HTML.split()),
            "test_upload": True,
        }

        result = uploader.upload_html_as_doc(
            html_content=SAMPLE_HTML,
            title=title,
            metadata=metadata,
            folder_path=date_path,
        )

        print(f"   ✓ Upload successful!")
        print(f"   File ID: {result['file_id']}")
        print(f"   Google Docs URL: {result['web_link']}")
        print(f"   Folder path: {result['folder_path']}\n")

        # Test uploading without folder path
        print("5. Testing upload to root folder...")
        simple_result = uploader.upload_html_as_doc(
            html_content="<h1>Simple Test</h1><p>This is a simple test.</p>",
            title=f"Simple Test - {datetime.now().strftime('%H%M%S')}",
            metadata={"type": "simple_test"},
        )

        print(f"   ✓ Simple upload successful!")
        print(f"   Google Docs URL: {simple_result['web_link']}\n")

        # Display folder structure
        print("6. Getting folder structure...")
        if uploader.upload_folder_id:
            structure = uploader.get_upload_folder_structure()
            if structure:
                print(f"   Upload folder: {structure.get('name', 'Unknown')}")
                print("   ✓ Folder structure retrieved\n")

        print("✅ All tests passed! Article upload functionality is working correctly.")
        print("\nYou can view your uploaded documents at the URLs above.")
        print("The documents have been converted to Google Docs format.\n")

        return 0

    except FileNotFoundError as e:
        print(f"\n❌ Error: {e}")
        print("\nMake sure you've run the authentication test first.")
        return 1

    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        print("\nCheck the logs above for more details.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
